#include "coro_extra/FcgiClient.h"
#include "coro/CoroPool.h"
#include "coro_extra/TcpSocket.h"
#include "coro/Acceptor.h"
#include <catch.hpp>

using namespace coro;
using namespace asio::ip;


static auto endpoint = tcp::endpoint(address::from_string("127.0.0.1"), 3033);
static std::vector<uint8_t> request_sample {
	0x01, 0x01, 0x00, 0x01, 0x00, 0x08, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x01, 0x04, 0x00, 0x01, 0x00, 0x7d, 0x00, 0x00, 0x0e, 0x03, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x47, 0x45, 0x54, 0x0b, 0x08, 0x53, 0x43, 0x52,
	0x49, 0x50, 0x54, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x61, 0x70, 0x69,
	0x0b, 0x08, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x55, 0x52, 0x49, 0x2f, 0x74, 0x65,
	0x73, 0x74, 0x61, 0x70, 0x69, 0x0b, 0x09, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x4e, 0x41,
	0x4d, 0x45, 0x31, 0x32, 0x37, 0x2e, 0x30, 0x2e, 0x30, 0x2e, 0x31, 0x0b, 0x04, 0x53, 0x45, 0x52,
	0x56, 0x45, 0x52, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x33, 0x30, 0x33, 0x33, 0x0f, 0x08, 0x53, 0x45,
	0x52, 0x56, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x48, 0x54, 0x54,
	0x50, 0x2f, 0x31, 0x2e, 0x31, 0x01, 0x04, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x05, 0x00,
	0x01, 0x00, 0x00, 0x00, 0x00
};
static std::vector<uint8_t> response_sample {
	0x01, 0x06, 0x00, 0x01, 0x00, 0x57, 0x01, 0x00, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x3a, 0x20,
	0x32, 0x30, 0x30, 0x20, 0x4f, 0x4b, 0x0d, 0x0a, 0x58, 0x2d, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x2d,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x20, 0x53, 0x41, 0x4d, 0x45, 0x4f, 0x52, 0x49,
	0x47, 0x49, 0x4e, 0x0d, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x54, 0x79, 0x70,
	0x65, 0x3a, 0x20, 0x74, 0x65, 0x78, 0x74, 0x2f, 0x68, 0x74, 0x6d, 0x6c, 0x3b, 0x20, 0x63, 0x68,
	0x61, 0x72, 0x73, 0x65, 0x74, 0x3d, 0x75, 0x74, 0x66, 0x2d, 0x38, 0x0d, 0x0a, 0x0d, 0x0a, 0x00,
	0x01, 0x06, 0x00, 0x01, 0x00, 0x02, 0x06, 0x00, 0x6f, 0x6b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x01, 0x06, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x00, 0x01, 0x00, 0x08, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

TEST_CASE("fcgireq") {
	bool serverDone = false;
	bool clientDone = false;
	CoroPool pool;

	pool.exec([&] {
		Acceptor<tcp> acceptor(endpoint);
		StreamSocket<tcp> socket = acceptor.accept();
		std::vector<uint8_t> request;
		request.resize(request_sample.size());
		REQUIRE(socket.read(asio::buffer(request)) == request_sample.size());
		REQUIRE(request == request_sample);
		REQUIRE(socket.write(asio::buffer(response_sample)) == response_sample.size());
		serverDone = true;
	});


	pool.exec([&] {
		TcpSocket socket;
		socket.connect(endpoint);

		FcgiClient cli;
		Buffer outbuf;
		cli.writeRequest("GET", "/testapi", "", "127.0.0.1", 3033, outbuf);
		socket.write(outbuf);

		Buffer inputbuf;
		auto resp = cli.readResponse(socket.iterator(inputbuf), socket.iterator());
		REQUIRE(resp.status == 200);
		REQUIRE(resp.body == "ok");
		clientDone = true;
	});

	REQUIRE_NOTHROW(pool.waitAll(false));
	REQUIRE(serverDone);
	REQUIRE(clientDone);
}
